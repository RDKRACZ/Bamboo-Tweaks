plugins {
    id "com.github.johnrengelman.shadow" version "7.0.0"
    id 'org.jetbrains.kotlin.jvm'
}

architectury {
    platformSetupLoomIde()

    fabric()
}

configurations {
    common
    shadowCommon
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

repositories {
    // Hephaestus
    maven {
        name = "Hephaestus"
        url = "https://hephaestus.dev/release"
    }

    // JitPack
    maven {
        name = "JitPack"
        url = "https://jitpack.io/"
    }

    // shedaniel
    maven {
        name = "shedaniel"
        url = "https://maven.shedaniel.me/"
    }

    mavenCentral()
}

dependencies {
    // Fabric Loader
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabricLoaderVersion}"

    // Fabric API
    modApi "net.fabricmc.fabric-api:fabric-api:${rootProject.fabricApiVersion}"

    // Architectury
    modApi "me.shedaniel:architectury-fabric:${rootProject.architecturyVersion}"

    // Mod Menu
    modImplementation "io.github.prospector:modmenu:${project.modMenuVersion}"

    // Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$rootProject.kotlinVersion"

    implementation(project(path: ":common")) {
        transitive = false
    }

    developmentFabric(project(path: ":common")) {
        transitive = false
    }

    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) {
        transitive = false
    }
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

shadowJar {
    configurations = [project.configurations.shadowCommon]

    classifier "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile

    dependsOn shadowJar

    classifier null
}

jar {
    classifier "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar

    dependsOn commonSources

    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}