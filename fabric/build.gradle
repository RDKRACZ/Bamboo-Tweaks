plugins {
    id "com.github.johnrengelman.shadow" version "7.0.0"
    id "org.jetbrains.kotlin.jvm"
}

architectury {
    platformSetupLoomIde()

    fabric()
}

configurations {
    common
    shadowCommon
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

repositories {
    // TerraformersMC
    maven {
        name = "TerraformersMC"
        url = "https://maven.terraformersmc.com/releases"
    }

    // shedaniel
    maven {
        name = "shedaniel"
        url = "https://maven.shedaniel.me/"
    }
}

dependencies {
    // Fabric Loader
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabricLoaderVersion}"

    // Fabric API
    modApi "net.fabricmc.fabric-api:fabric-api:${rootProject.fabricApiVersion}"

    // Architectury
    modApi "dev.architectury:architectury-fabric:${rootProject.architecturyVersion}"

    // Mod Menu
    modImplementation "com.terraformersmc:modmenu:${project.modMenuVersion}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }
}

processResources {
    filesMatching("fabric.mod.json") {
        expand(
                id: projectId,
                name: projectName,
                version: projectVersion,
                description: projectDescription,
                minecraftVersion: minecraftVersion,
                fabricLoaderVersion: fabricLoaderVersion,
                fabricApiVersion: fabricApiVersion,
                architecturyVersion: architecturyVersion
        )
    }
}

shadowJar {
    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier null
}

jar {
    classifier "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}